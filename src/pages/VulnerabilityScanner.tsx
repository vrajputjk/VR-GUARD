import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Shield, AlertTriangle, CheckCircle, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

interface Vulnerability {
  type: string;
  severity: "Low" | "Medium" | "High" | "Critical";
  description: string;
  status: "Found" | "Not Found" | "Protected";
}

const VulnerabilityScanner = () => {
  const [domain, setDomain] = useState("");
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const { toast } = useToast();

  const performScan = () => {
    if (!domain.trim()) {
      toast({
        title: "Error",
        description: "Please enter a valid domain",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    
    // Simulate vulnerability scan
    setTimeout(() => {
      const mockVulns: Vulnerability[] = [
        {
          type: "SQL Injection",
          severity: "High",
          description: "Potential SQL injection vulnerability detected in login form",
          status: Math.random() > 0.5 ? "Found" : "Protected"
        },
        {
          type: "Cross-Site Scripting (XSS)",
          severity: "Medium",
          description: "Reflected XSS vulnerability in search parameter",
          status: Math.random() > 0.5 ? "Found" : "Not Found"
        },
        {
          type: "Missing Security Headers",
          severity: "Low",
          description: "X-Frame-Options header not set",
          status: "Found"
        },
        {
          type: "Outdated Components",
          severity: "Critical",
          description: "jQuery version 1.8.2 has known vulnerabilities",
          status: Math.random() > 0.7 ? "Found" : "Not Found"
        },
        {
          type: "Open Ports",
          severity: "Medium",
          description: "Port 22 (SSH) open to public",
          status: Math.random() > 0.6 ? "Found" : "Protected"
        }
      ];
      
      setVulnerabilities(mockVulns);
      setIsScanning(false);
    }, 3000);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "bg-red-500/10 text-red-400 border-red-500/30";
      case "High": return "bg-orange-500/10 text-orange-400 border-orange-500/30";
      case "Medium": return "bg-yellow-500/10 text-yellow-400 border-yellow-500/30";
      case "Low": return "bg-blue-500/10 text-blue-400 border-blue-500/30";
      default: return "bg-gray-500/10 text-gray-400 border-gray-500/30";
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "Found": return <XCircle className="w-4 h-4 text-red-400" />;
      case "Protected": return <Shield className="w-4 h-4 text-green-400" />;
      case "Not Found": return <CheckCircle className="w-4 h-4 text-green-400" />;
      default: return <AlertTriangle className="w-4 h-4 text-yellow-400" />;
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          <div className="text-center space-y-2">
            <h1 className="text-3xl font-bold bg-gradient-cyber bg-clip-text text-transparent">
              Website Vulnerability Scanner
            </h1>
            <p className="text-muted-foreground">
              Scan websites for common security vulnerabilities
            </p>
          </div>

          <Card className="cyber-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Target Configuration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="domain">Domain or URL</Label>
                <Input
                  id="domain"
                  placeholder="example.com or https://example.com"
                  value={domain}
                  onChange={(e) => setDomain(e.target.value)}
                />
              </div>
              
              <Button 
                onClick={performScan}
                disabled={isScanning}
                className="w-full relative"
              >
                {isScanning ? (
                  <div className="flex items-center justify-center space-x-2">
                    <LoadingSpinner type="vr" size="sm" />
                    <span>Scanning...</span>
                  </div>
                ) : (
                  "Start Vulnerability Scan"
                )}
              </Button>
            </CardContent>
          </Card>

          {vulnerabilities.length > 0 && (
            <Card className="cyber-card">
              <CardHeader>
                <CardTitle>Scan Results</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {vulnerabilities.map((vuln, index) => (
                  <div key={index} className="p-4 rounded-lg border border-border">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {getStatusIcon(vuln.status)}
                        <h3 className="font-medium">{vuln.type}</h3>
                      </div>
                      <Badge 
                        variant="outline" 
                        className={getSeverityColor(vuln.severity)}
                      >
                        {vuln.severity}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">{vuln.description}</p>
                    <div className="mt-2">
                      <Badge variant="secondary" className="text-xs">
                        {vuln.status}
                      </Badge>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default VulnerabilityScanner;